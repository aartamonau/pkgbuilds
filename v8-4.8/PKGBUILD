# Contributor: Anatol Pomozov <anatol.pomozov@gmail.com>
# Contributor: Bart≈Çomiej Piotrowski <nospam@bpiotrowski.pl>
# Contributor: Kaiting Chen <kaitocracy@gmail.com>
# Contributor: tocer <tocer.deng@gmail.com>
# Contributor: Marco Pompili <marcs.pompili@gmail.com>
# Maintaner: Aliaksey Artamonau <aliaksiej.artamonau@gmail.com>

pkgname=v8-4.8
pkgver=4.8.271.19
pkgrel=1
pkgdesc="Fast and modern Javascript engine (4.8 version)"
arch=("i686" "x86_64")
url="https://code.google.com/p/v8/"
license=("BSD")
depends=("readline")
makedepends=("python2" "python2-virtualenv" "ninja" "git")
source=("depot_tools::git+https://chromium.googlesource.com/chromium/tools/depot_tools.git"
        "gyp::git+https://chromium.googlesource.com/external/gyp"
        "v8.conf"
        "v8.pc")
sha256sums=('SKIP'
            'SKIP'
            '269bf24724703c4b8e007ae677b97c0f70fb300fdf0bef0f6bc89c56e3f1d9e7'
            '6875d508cf82e19a8085e433c29660f2bef8b1f4882d0194af2aa67e9976d6fe')
provides=('v8')
conflicts=('v8')

case "$CARCH" in
  x86_64) V8_ARCH="x64" ;;
  i686) V8_ARCH="ia32" ;;
esac

prepare() {
  msg2 "Creating Python Virtual Environment"
  virtualenv2 -q venv
  msg2 "Activating Python Virtual Environment"
  source venv/bin/activate > /dev/null
  msg2 "Installing dependencies in the Virtual Environment"
  pip install gyp/ -q
  pip install colorama -q
  pip install pylint -q
  pip install lazy-object-proxy -q
  pip install singledispatch -q
  pip install wrapt -q

  export PATH=`pwd`/depot_tools:"$PATH"
  export GYP_GENERATORS=ninja

  if [ ! -d "v8" ]; then
    msg2 "Fetching V8 code"
    yes | fetch v8
  fi

  cd v8

  msg2 "Syncing"
  gclient sync

  git checkout tags/$pkgver

  sed "s/@VERSION@/$pkgver/g" -i "$srcdir/v8.pc"
}

build() {
  source venv/bin/activate > /dev/null
  export PATH=`pwd`/depot_tools:"$PATH"
  export GYP_GENERATORS=ninja

  cd v8

  sed "s/@VERSION@/$pkgver/g" -i "$srcdir/v8.pc"

  build/gyp_v8 -Dlinux_use_bundled_gold=0 -Dclang=0 -Dhost_clang=0 -Dcomponent=shared_library -Dv8_enable_backtrace=1 -Dv8_use_snapshot='false' -Dclang=0 -Dv8_use_external_startup_data=0 -Dv8_enable_i18n_support=1 -Dtest_isolation_mode=noop -Dv8_target_arch=${V8_ARCH} -Dwerror= -DWno-pedantic= -f ninja

  ninja -C out/Release v8 v8_libplatform
}

package() {
  cd v8

  install -d $pkgdir/opt/v8
  install -d $pkgdir/opt/v8/lib

  install -Dm755 out/Release/lib/*.so $pkgdir/opt/v8/lib

  for lib in `find ./out/Release/obj/tools/ -name *.a`; do
    ar -t "$lib" | xargs ar rvs "$lib.new" && install -Dm644 "$lib.new" "$pkgdir/opt/v8/lib/$(basename $lib)"
  done

  install -d $pkgdir/etc/ld.so.conf.d
  install -Dm644 $srcdir/v8.conf $pkgdir/etc/ld.so.conf.d

  install -d $pkgdir/opt/v8/include
  install -d $pkgdir/opt/v8/include/libplatform
  install -Dm644 include/*.h $pkgdir/opt/v8/include
  install -Dm644 include/libplatform/*.h $pkgdir/opt/v8/include/libplatform

  install -d $pkgdir/usr/lib/pkgconfig
  install -m644 $srcdir/v8.pc $pkgdir/usr/lib/pkgconfig

  install -d $pkgdir/opt/v8/licenses
  install -m644 LICENSE* $pkgdir/opt/v8/licenses/
}
